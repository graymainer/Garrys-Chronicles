@PointClass base(Targetname) iconsprite("gunman/editor/gunman_equip") = gunman_equip : "This entity is apart of the Garry's Chronicles project. \n" + "This entity will equip the activator with the specified weaponry. \n" + "It will replace these weapons with gunman sweps if they are found in the user's addons. \n" + "Weapons are specified through spawn flags."
[
	spawnflags(flags) =
	[
		1		:	"Crowbar / Knife"		: 0
		2		:	"Pistol"				: 0
		4		:	"Sniper" 				: 0
		8		:	"Machinegun"			: 0
		16		:	"Shotgun"				: 0
		32		:	"Rocket Launcher"		: 0
		64		:	"Grenades"				: 0
		128		:	"Strip Before Equip"	: 1
		256		:	"Force Vanilla Weapons"	: 0
		512		:	"Equip All Players"		: 1
		1024	:	"Equip on Spawn"		: 1
	]
	
	nades(integer)										: "Grenades" 			: 		2 		: "How many grenades should we give? (If any)"
	ammomulti(float)									: "Ammo Amount" 	: 	"1.0" 	: "How much ammo should we give generally? Acts as a mutliplier. Can be set to zero to avoid giving any ammo. (based on default amount of ammo recieved when SWEP is given.)"

	input equip(void)									: "Equips the entity. If activator is null, it will equip player 1. If 'Equip All Players' is ticked, all players will be equipped."
	input strip(void)									: "Strips the entity of all its weapons. if 'Strip Before Equip' is unticked, nothing will happen. If activator is null, it will strip player 1. If 'Equip All Players' is ticked, all players will be stripped."
	input setAmmoMultiplier(float)						: "Sets our ammo multiplier."
	input toggleGun(string)								: "Enter Melee, Pistol, Sniper, Machinegun, Shotgun, Launcher, or Grenades to toggle if you have that weapon type or not. For example, if you got the crowbar, input us: 'toggleGun melee (caps dont matter)' and if we didn't think you had melee already, then we'll set melee to true."
	input clear(void)									: "Clears all guns we think you have. No weapons will be given."
	input giveAll(void)									: "Makes us think you have all weapons. All weapons will be given."
	
	output onEquipped(void)								: "Fires when we equipped something."
	output onCleared(void)								: "Fires when we cleared all guns."
	output onGiveAll(void)								: "Fires when we gave all guns."
	output onGunsChanged(void)							: "Fires when our catalogue of collected guns have changed."
	
]

@PointClass base(Targetname, Parentname) iconsprite("gunman/editor/gunman_item_spawner") = gunman_item_spawner : "This entity is apart of the Garry's Chronicles project. \n" + "It will spawn the specified item into the world. \n" + "If the 'Respawn Item' flag is ticked, the item will respawn once it's picked up. This is the default respawn behavior. \n" + "It will replace its items with gunman items if they are found in the user's addons. \n" + "If you wish to customize the beam effects that play on spawn, you will need to create an env_beam entity that will act as a template for our beam effects."
[
	spawnflags(flags) =
	[
		1	:	"Respawn"															: 	1 //should the item respawn when its taken?
		2	:	"Force HL2 Items"													: 	0 //skip the gunman swep check and go straight for hl2 stuff?
		4	:	"No Beam FX"														: 	0 //Disable beam effects. Redundant if 'No FX' is enabled.
		8	:	"No Glow FX"														: 	0 //Disable glow effects. Redundant if 'No FX' is enabled.
		16	:	"No Spark FX"														: 	0 //Disable sparking effects. Redundant if 'No FX' is enabled.
		32	:	"No Light FX"														: 	0 //Disable lighting effects. Redundant if 'No FX' is enabled.
		64	:	"Disable Light FX Shadows"											: 	1 //Disable shadows drawn from light effects. Redundant if 'No FX' is enabled.
		128	:	"No Spawn Sparks"													: 	0 //Disable sparking effects when spawning an item. Spark effects will still play when deleting an item. (i.e if the item reaches the respawnDistance or is replace by another call to spawn()) Redundant if 'No FX' is enabled.
		256	:	"No FX"																: 	0 //Disables all effects.
		512	:	"Spawn Frozen"														: 	0 //Spawn items frozen.
		1024:	"Spawn in Zero Gravity"												: 	0 //Spawn items in zero gravity. Just for fun. uses lua/gunman/gunmanZeroG.lua
		2048:	"No Surface Alignment"												: 	0 //Disables automatic surface alignment. Item will spawn right where the entity is placed. 
	]
	
	spawnitem(choices) 							: "Item to Spawn" 							: 	1   						:	"What item this spawner should create. Can be the classname of an entity if you wish to spawn something not listed here. Gunman swep check will have no effect in that case." =
	[
		1	:	"Medkit"
		2	:	"Armor"
		3	:	"Pistol Ammo"
		4	:	"Crossbow Ammo" //specifically for hl2 wpns.
		5	:	"Machinegun Ammo"
		6	:	"Shotgun Ammo"
		7	:	"Grenades"
	] 
	
	fxLite(target_destination)					:	"Light Entity Override"					:	""							:	"The env_projectedtexture entity to use instead our own for our spawning effects. If empty or not an env_projectedtexture entity, it will assume our own default settings. Can NOT be multiple entities. Light will be turned off on spawn automatically. Position and angles will be overwritten. 'No FX' and 'No Light FX' flags will disable the light effects!"	
	fxLiteAngles(angle)							:	"Light Effect Angles"					:	"-90 0 0"					:	"The angles that the spawned in light effects should assume when created. Irrelevant if 'No FX' or 'No Light FX' are set. Will override the angles of the set light Entity if the angles are anything other than '-90 0 0'"
	fxBeam(target_destination)					:	"Beam Entity Override"					:	""							:	"The env_beam entity to use instead our own for our spawning effects. If empty or not an env_beam entity, it will assume our own default settings. Can be multiple beam entities if they share the same name. Position and LightningStart(Start Entity) will be overwritten. 'No FX' flag will disable the beam effects! 'No Beam FX' will obviously disable."	
	fxSprite(sprite)							:	"Spawn Sprite"							:	"gctextures/gc_spnglw.vmt"	:	"The vmt to play when we spawn in an item. If empty, will default to gc_spnglw.vmt. 'No FX' flag will disable this!"
	fxSound(sound)								:	"Spawn Sound"							:	"gcsfx/ammo_respawn.wav"	:	"The sound to play when spawning in an item. If empty, no sound will play. 'No FX' flag will disable this!"
	
	
	spawnLifespan(integer)						:	"Spawner Lifespan"						:	0							:	"After these many items have been spawned, disable this spawner. If zero, no limit will be applied."
	spawnPositionOverride(target_destination)	:	"Spawn Position Override"				:	""							:	"Overrides the default position for items to be spawned from. 'From' because all entites unless 'No Surface Alignment' flag is ticked, will spawned onto the nearest surface. If left empty, they are spawned from the position of the gunman_item_spawner entity."
	spawnOffset(vector)							:	"Spawned Item Offset"					:	"0 0 1"						:	"An offset to move the item by when spawning it in."
	spawnAngles(angle)							:	"Spawned Item Angles"					:	"0 0 0"						:	"The angles that the item should be orientated at when spawned in."
	spawnSurfaceTraceDirection(vector)			:	"Surface Trace Direction"				:	"0 0 -10000"				:	"An offset to move the item by when spawning it in."
	spawnDelay(float)							:	"Spawn Delay"							:	"1.0"						:	"The amount of seconds to wait to spawn in an item. Value must be '0.1' or over."
	respawnDelay(float)							:	"Respawn Delay"							:	"3.0"						:	"The amount of seconds to wait to respawn an item. Value must be '0.1' or over. Only applicable if the 'Respawn Item' flag is ticked. Can be zero to be instantenous. Keep in mind that the spawn delay will add onto this delay."
	respawnDistance(float)						:	"Distance to Respawn"					:	"0.0"						:	"The distance that needs to be reached before we can respawn an item. Zero means default respawning behavior. (see help for default respawn behavior definition.)"

	

	StartDisabled(choices) 						: "Start Disabled" 							: 	0   						:	 "Should this spawner start off and not create an item on spawn?" =
	[	
		0	:	"No"	
		1	:	"Yes"	
	]
	
	
	input spawn(string)							: 	"Tells the spawner to spawn its item. Can override the spawner's set item and spawn the item you give instead if given a classname or a default item type index. (1-7)"
	input setItem(string)						: 	"Sets the item we should spawn. Enter 1-7 to specify default item types. If the value given is not a simple number and is not a default item name, then we'll assume its a classname."
	input setBeamEntity(target_destination)		: 	"Sets our beam entity. Pass us either nothing, 'nil', or 'null' (no caps) to reset this setting to default."
	input setLightEntity(target_destination)	: 	"Sets our light entity. Pass us either nothing, 'nil', or 'null' (no caps) to reset this setting to default."
	input setSpawnSprite(string)				: 	"Sets the sprite to play when spawning."
	input setSpawnSound(string)					: 	"Sets the sound to play when spawning. Pass us either nothing, 'nil', or 'null' (no caps) to reset this setting to default."
	input setSpawnLifespan(integer)				: 	"Sets the spawner lifespan."
	input setSpawnOffset(vector)				: 	"Sets the offset to spawn at."
	input setSpawnAngles(angle)					: 	"Sets the angles to spawn with."
	input setSurfaceTraceDirection(vector)		: 	"Sets the direction to do a surface trace from."
	input setSpawnDelay(float)					: 	"Sets the spawning delay."
	input setRespawnDelay(float)				: 	"Sets the respawning delay."
	input setRespawnDistance(float)				: 	"Sets distance to respawn an item by."
	input toggle(void)							:	"Toggles the spawner. Fires onEnabled and onDisabled respectively."
	input enable(void)							:	"Enables the spawner. Fires onEnabled."
	input disable(void)							:	"Disables the spawner. Fires onDisabled."
	input respawn(void)							:	"Deletes the item and creates a new one."
	input printInfo(void)						:	"Prints the entity's data into console. For debugging."
	
	output onSpawnBegin(void)					: 	"Fires when we begin the spawning process."
	output onSpawn(void)						: 	"Fires when we spawn the item in."
	output onItemDeleted(void)					: 	"Fires when we delete an item."
	output onItemChanged(void)					: 	"Fires when we change what item we're spawning in."
	output onItemGot(void)						: 	"Fires when the item we spawned in was picked up. (Or was deleted!)"
	output onDisabled(void)						: 	"Fires when we're disabled."
	output onEnabled(void)						: 	"Fires when we're enabled."
	output onRespawn(void)						: 	"Fires when we begin to respawn our item."
	output onLifespanEnd(void)					: 	"Fires when this spawner's lifespan has reached its end."
	
]

@PointClass base(Targetname) iconsprite("gunman/editor/gunman_map_marker") = gunman_map_marker :
	"This entity is apart of the Garry's Chronicles project. Marks this map as a garry's chronicles map which enables lua systems from that project."
[
]

@PointClass base(Targetname, Parentname, Angles) studioprop() = gunman_test : "This entity is apart of the Garry's Chronicles project. \n" + "This is a testing entity."
[
	spawnflags(flags) =
	[
		1	:	"Say on Spawn": 0
	]
	
	saything(string)					: "Thing to Say"	: "Hi" : "The thing we should say."


	input Test(void)					: "They're waiting for you mr. freeman. In the tesssssst chamberrrrrr."
	input setSayThing(string)			: "Tell us what to say."
	
	output onSaid(string)				: "Fired when we said something. Returns what we said."
]


//@PointClass base(Item) studio("models/gunman/item_.mdl")= gunman_item_ : "" []

//@PointClass base(Weapon) studio("models/gunman/weapon/.mdl") = gunman_weapon_ : "" []



@PointClass base(Weapon) studio("models/gcweapons/combatknife/w_combatknife.mdl") = gunman_weapon_knife : "Standard Issue Combat Knife." []
@PointClass base(Weapon) studio("models/gcweapons/gunmanfists/v_melee.mdl") = gunman_weapon_fists : "Fisticuffs." []
@PointClass base(Weapon) studio("models/gcweapons/gausspistol/w_gausspistol.mdl") = gunman_weapon_pistol : "Standard Issued Gauss Pistol." []
@PointClass base(Weapon) studio("models/gcweapons/mechagun/w_mechagun.mdl") = gunman_weapon_mechagun : "Mecha-Gun Assault Rifle." []
@PointClass base(Weapon) studio("models/gcweapons/shotgun/w_shotgun.mdl") = gunman_weapon_shotgun : "Standard Issue Trooper Scattergun." []


@PointClass base(Item) studio("models/gunman/item_ammo_pistol.mdl")= gunman_item_ammo_pistol : "A cannister of gauss energy for the gauss pistol." []
@PointClass base(Item) studio("models/gunman/item_ammo_shotgun.mdl")= gunman_item_ammo_shotgun : "A box of 12ga. buckshot shells for the combat shotgun." []
@PointClass base(Item) studio("models/gunman/item_ammo_mechagun.mdl")= gunman_item_ammo_mechagun : "A rack of 7.62mm rounds for the Mecha-Gun." []
@PointClass base(Item) studio("models/gunman/item_ammo_rocketpack.mdl")= gunman_item_ammo_rocketpack : "A pack of HE rocket cannisters." []
@PointClass base(Item) studio("models/gunman/item_armor.mdl")= gunman_item_armor : "A standard issue gunman ballistics proof combat vest." []
@PointClass base(Item) studio("models/gunman/item_medkit.mdl")= gunman_item_medkit : "A basic emergency medical kit." []


@PointClass base(Targetname, Parentname, Angles) studioprop("models/gunman/digitgod.mdl") = gunman_digitgod : "This entity is apart of the Garry's Chronicles project. \n" + "It recreates the entity_digitgod entity.\n"+ "\n"+ "\n"+ "An entity that will hold a value and display it visually on a counter. \n" + "Supports only three-digit numbers. \n" + "Does NOT support negative numbers or decimals.\n" + "\n" + "Source is lua/entities/gunman_digitgod.lua"
[
	//if you want to change this system to use custom models, you'll want to get rid of the "models/gunman/digitgod.mdl" part and leave it as "studioprop()". 
	//then make sure that you have a key value here that has the type "studio" set to a default model. otherwise, you'll get the generic hammer entity cube of death.

	spawnflags(flags) =
	[
		1	:	"Fire Target Once"				:	1
		2	:	"Trigger Target on Exact Match"	:	0
		4 	:	"Dont Render"					:	0
	]

	initialvalue(integer)				: "Initial Value"	: 0	  : "The value that the counter should be set at when spawned in. \n" + "If 'Clear to initial value' is ticked, when cleared, this value will be what the counter is set back to."

	targetvalue(integer)				: "Value Target"	: 0   : "The value this counter should aim to achieve. Once reached, the onValueReached output will fire. \n" + "\n" + "A value of 0 will disable."
	
	maxvalue(integer)					: "Maximum Value"	: 999 : "The max value that this counter can go to. \n" + "Will fire onMaxReached output when reached. \n" + "\n" + "A value of 0 will set this counter to have no max."

//	milestone(integer)					: "Milestone Value" : 10  : "The value we consider a milestone. \n" + "\n" + "By default, every ten numbers added to the counter will be considered a milestone, and fire the onMilestone() output. \n" + "So for example:\n" + "0..1..2..3..4..5..6..7..8..9..10 Milestone reached! \n" + "11..12..13..14..15..16..17..18..19..20 Milestone reached! \n" + "21..22..23 etc."

//this is the key im referring to above.
//	model(studio)						: "World Model"		: 		"models/gunman/digitgod.mdl" : "What model should this counter be represented by? \n" + "WARNING! The model MUST have at least 10 skins to represent all 10 digits. Otherwise, the model will not load and will go back to default."

	//sound(sound) 						: "Sound Name" 		: ""  : "The sound to play whenever the value changes.\n" + " Example would be making the counter make a 'ticking' sound when it increments.\n" + " Must be a .wav file. If left blank, no sound will play."
	
	//sndvol(integer) 					: "Sound Volume"	: 5   : "The volume to play the sound at. Only works if a sound was selected."
	
	//sndpitch(integer) 				: "Sound Pitch"		: 100 : "The pitch to play the sound at. Only works if a sound was selected."
	
	scaledmg(choices)					: "Scale by Damage" : 0	  : "Should we scale all increments, additions, subtractions, etc by the damage of the player's current weapon?" = 
	[
		0 : "No"
		1 : "Yes"
	]
	
	StartDisabled(choices) 				: "Start Disabled" 	: 0   : "Should this counter be off when spawned in?" =
	[
		0 : "No"
		1 : "Yes"
	] 

	DisableShadows(choices) 			: "Disable Shadows" : 0   : "Should this counter's model not render shadows?"  =
	[
		0 : "No"
		1 : "Yes"
	] 
	
	input Add(integer)					: "Add this value to the counter."
	input Sub(integer)					: "Subtract this value from the counter."
	input Increment(void)				: "Increment the counter."
	input Decrement(void)				: "Decrement the counter."
	input Toggle(void)					: "Will toggle the counter."
	input Enable(void)					: "Will enable the counter. Fires the onEnabled output."
	input Disable(void)					: "Will disable the counter. It will no longer function. Fires the onDisabled output."
	input Clear(void)					: "Clears the current value of this counter and resets it to 0. \n" + "But if the 'Clear to initial value' flag is set, it will instead reset to whatever the initial value was."
	//input getValue(void)				: "Will get the current value that this counter is at.\n" + "This works through some lua trickery. basically, if its an entity that can hold values, like a 'logic_case' or a 'math_counter',\n" + "we will fire their respective 'invalue' or 'setvalue' inputs and feed them the value you asked for here.\n" + "This means that the entity you're making the output from should be something that can hold values. Like logic_case.\n" + "\n" + "If the entity isn't recognized as an entity that can hold values, it will then try to add an output with the value inside it.\n" + "It should be findable by searching through the entity that asked for the value's keyvalues.\n" + " This will be the way all of our get inputs will work."
	input setValue(integer)				: "Will set our value to what you specify. Cannot be negative and cannot pass the max limit."
	//input getLastValue(void)			: "Will get the last value that this counter had. This is only set when the value has previously changed.\n" + "It will return 0 if nothing changed."
	input setMax(integer)				: "Will set the maximum value of this counter to the parameter value."
	//input getMax(void)					: "Will get our maximum value."
	input setTarget(integer)			: "Will set the target value of this counter to the parameter value."
	//input getTarget(void)				: "Will get our target value."
	//input setSound(integer)				: "Will change the sound to play to whatever you give us. Does not support gamesound entries."
	//input setSoundVolume(integer)		: "Will change the volume of the sound to whatever you give us."
	//input setSoundPitch(integer)		: "Will change the pitch of the sound to whatever you give us."
	//input getSound(void)				: "Will get the sound we currently are using. Wont work with any entites that can hold values, will be an output."
	//input getSoundVolume(void)			: "Will get the volume we're currently playing the sound at."
	//input getSoundPitch(void)			: "Will get the pitch of our sound."
	//input getModel(void)				: "Gets our model."
	//input setModel(void)				: "Sets our model. Model must have at least ten skins to represent all 10 digits."
	//input isMaxReached(void)			: "Have we reached our maximum value? returns 0 for false, 1 for true."
	
	output onIncrement(integer)			: "Fired when this counter is incremented. Returns the value the counter is now at."
	output onDecrement(integer)			: "Fired when this counter is decremented. Returns the value the counter is now at."
	output onAdd(integer)				: "Fired when this counter is added to. Returns the value added to it."
	output onSub(integer)				: "Fired when this counter is subtracted from. Returns the value subtracted from it."
	//output onMilestone(integer)			: "Fired when this counter reaches the next milestone. \n" + "By default, a milestone is reached by every 10. Will return it's current value."
	output onTargetReached(integer)		: "Fired when this counter reaches its target value. Will return it's current value."
	output onValueChanged(integer)		: "Fired when this counter's value is changed. Returns the new value. You can retrieve the old value through getLastValue()."
	output onMaxReached(integer)		: "Fired when this counter reaches its max value. Will return it's current value."
	output onEnabled(void)				: "Fired when this counter is enabled."
	output onDisabled(void)				: "Fired when this counter is disabled."
	output onCleared(void)				: "Fired when this counter's value has been cleared."
	output onMaxSet(integer)			: "Fired when this counter's maximum value has been set to something. Returns what it was set to."
	output onValueSet(integer)			: "Fired when this counter's value has been set to something. Returns what it was set to."
	output onTargetSet(integer)			: "Fired when this counter's target value has been set to something. Returns what it was set to."
	//output onSoundChanged(string)		: "Fired when our sound is changed. Returns the new sound file."
	//output onModelChanged(string)		: "Fired when our model is changed. Returns the new model file."
]